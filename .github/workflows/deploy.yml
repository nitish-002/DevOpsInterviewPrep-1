name: Deploy Flask App

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t flask-app .
    
    - name: Test the application
      run: |
        # Run container in background
        docker run -d -p 5000:5000 --name test-container flask-app
        
        # Make test script executable and run it
        chmod +x test.sh
        ./test.sh
    
    - name: Save Docker image
      run: docker save flask-app | gzip > flask-app.tar.gz
    
    - name: Upload image artifact
      uses: actions/upload-artifact@v3
      with:
        name: flask-app-image
        path: flask-app.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Download image artifact
      uses: actions/download-artifact@v3
      with:
        name: flask-app-image
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Transfer Docker image to GCP VM
      run: |
        # Copy the Docker image to the VM
        gcloud compute scp flask-app.tar.gz ${{ secrets.GCP_VM_INSTANCE }}:/tmp/ \
          --zone=${{ secrets.GCP_ZONE }} \
          --project=${{ secrets.GCP_PROJECT }}
    
    - name: Deploy to GCP VM
      run: |
        gcloud compute ssh ${{ secrets.GCP_VM_INSTANCE }} \
          --zone=${{ secrets.GCP_ZONE }} \
          --project=${{ secrets.GCP_PROJECT }} \
          --command="
            # Stop existing container
            docker stop flask-app 2>/dev/null || true
            docker rm flask-app 2>/dev/null || true
            docker rmi flask-app 2>/dev/null || true
            
            # Load and run the new container
            cd /tmp
            gunzip -c flask-app.tar.gz | docker load
            rm flask-app.tar.gz
            
            # Start the new container
            docker run -d -p 5000:5000 --name flask-app --restart unless-stopped flask-app
            
            # Verify deployment
            sleep 3
            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo '✅ Deployment successful - App is running'
            else
              echo '❌ Deployment failed - App is not responding'
              docker logs flask-app
              exit 1
            fi
          "
